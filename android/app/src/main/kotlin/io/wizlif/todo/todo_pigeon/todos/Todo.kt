// Autogenerated from Pigeon (v9.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.wizlif.todo.todo_pigeon.todos

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Todo (
  val id: Long,
  val title: String,
  val message: String,
  val createdAt: Long,
  val updatedAt: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Todo {
      val id = list[0].let { if (it is Int) it.toLong() else it as Long }
      val title = list[1] as String
      val message = list[2] as String
      val createdAt = list[3].let { if (it is Int) it.toLong() else it as Long }
      val updatedAt = list[4].let { if (it is Int) it.toLong() else it as Long? }
      return Todo(id, title, message, createdAt, updatedAt)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      title,
      message,
      createdAt,
      updatedAt,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object TodoApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Todo.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Todo -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface TodoApi {
  fun getTodos(callback: (Result<List<Todo>>) -> Unit)
  fun getTodo(id: Long, callback: (Result<Todo>) -> Unit)
  fun addTodo(title: String, message: String, callback: (Result<Todo>) -> Unit)
  fun updateTodo(todo: Todo, callback: (Result<Todo>) -> Unit)
  fun deleteTodo(id: Long, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by TodoApi. */
    val codec: MessageCodec<Any?> by lazy {
      TodoApiCodec
    }
    /** Sets up an instance of `TodoApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: TodoApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TodoApi.getTodos", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getTodos() { result: Result<List<Todo>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TodoApi.getTodo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.getTodo(idArg) { result: Result<Todo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TodoApi.addTodo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val titleArg = args[0] as String
            val messageArg = args[1] as String
            api.addTodo(titleArg, messageArg) { result: Result<Todo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TodoApi.updateTodo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val todoArg = args[0] as Todo
            api.updateTodo(todoArg) { result: Result<Todo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TodoApi.deleteTodo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.deleteTodo(idArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
